import React, { useRef, useEffect, useState } from "react";
import MenuIcon from "../../assets/menu.png";
import CloseIcon from "../../assets/close.png";
import introJs from "intro.js";
import "intro.js/introjs.css";

export default function Sidebar({ onHitungKPR, onSimulasiKPR }) {
  const [open, setOpen] = useState(false); // sidebar mobile
  const [showFormHitung, setShowFormHitung] = useState(false);
  const [showFormSimulasi, setShowFormSimulasi] = useState(false);

  const [dp, setDp] = useState("");
  const [tenor, setTenor] = useState("");
  const [gaji, setGaji] = useState("");

  const hasRunIntro = useRef(false);

  useEffect(() => {
    const hasSeenIntro = localStorage.getItem("hasSeenIntroSimulasiKPR");
    if (hasSeenIntro || hasRunIntro.current) return;

    const isMobile = window.innerWidth < 768;
    const btnSelector = isMobile
      ? "#btn-simulasi-kpr-mobile"
      : "#btn-simulasi-kpr-desktop";
    const formSelector = isMobile
      ? "#form-simulasi-kpr-mobile"
      : "#form-simulasi-kpr-desktop";
    const inputSelectors = isMobile
      ? [
          "#input-penghasilan-mobile",
          "#input-kesanggupan-mobile",
          "#input-tenor-mobile",
        ]
      : [
          "#input-penghasilan-desktop",
          "#input-kesanggupan-desktop",
          "#input-tenor-desktop",
        ];
    const submitSelector = isMobile
      ? "#btn-submit-mobile"
      : "#btn-submit-desktop";

    const waitForElement = (selector, timeout = 4000) =>
      new Promise((resolve) => {
        const start = Date.now();
        const check = () => {
          const el = document.querySelector(selector);
          if (el) return resolve(el);
          if (Date.now() - start > timeout) return resolve(null);
          setTimeout(check, 100);
        };
        check();
      });

    const startIntroSteps = (steps) => {
      const intro = introJs();
      intro.setOptions({
        steps,
        disableInteraction: false,
        nextLabel: "Lanjut →",
        prevLabel: "← Kembali",
        doneLabel: "Selesai",
        showStepNumbers: false,
        scrollToElement: true,
        exitOnOverlayClick: false,
      });

      const finish = () =>
        localStorage.setItem("hasSeenIntroSimulasiKPR", "true");
      intro.oncomplete(finish);
      intro.onexit(finish);
      intro.start();

      return intro;
    };

    const runIntro = async () => {
      const intro = startIntroSteps([
        {
          element: btnSelector,
          intro: "💰 Klik tombol ini untuk membuka form Simulasi KPR.",
          position: "bottom",
        },
      ]);

      intro.onchange(async (targetElement) => {
        if (
          targetElement &&
          targetElement.matches &&
          targetElement.matches(btnSelector)
        ) {
          // klik tombol untuk buka form
          try {
            targetElement.click();
          } catch (_) {}

          // tunggu form muncul
          const formEl = await waitForElement(formSelector, 5000);
          if (!formEl) return;

          await new Promise((r) => setTimeout(r, 300)); // tunggu render

          // kumpulkan input yang tersedia
          const validInputSteps = inputSelectors
            .map((sel, idx) => {
              const el = document.querySelector(sel);
              if (!el) return null;
              const label =
                el.placeholder ||
                el.name ||
                (el.labels?.[0]?.innerText ?? `Input ${idx + 1}`);
              return {
                element: sel,
                intro: `📋 Isi kolom <b>${label}</b> sesuai data kamu.`,
                position: "bottom",
              };
            })
            .filter(Boolean);

          // restart intro dengan langkah lengkap
          const allSteps = [
            ...validInputSteps,
            {
              element: submitSelector,
              intro:
                "✅ Setelah semua terisi, klik tombol <b>Hitung</b> untuk melihat hasil simulasi KPR kamu.",
              position: "bottom",
            },
          ];

          intro.exit(); // tutup intro pertama
          setTimeout(() => startIntroSteps(allSteps), 300); // mulai intro baru
        }
      });
    };

    const timer = setTimeout(runIntro, 800);
    return () => clearTimeout(timer);
  }, []);

  // ======== Handler Hitung KPR ========
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!dp || !tenor) {
      alert("Semua field wajib diisi!");
      return;
    }

    if (typeof onHitungKPR === "function") {
      onHitungKPR({ dp, tenor, mode: "hitung_kpr" });
      setShowFormHitung(false);
    } else {
      console.warn(
        "⚠️ Fungsi onHitungKPR belum didefinisikan di parent component!"
      );
    }
  };

  // ======== Handler Simulasi KPR ========
  const handleSubmitSimulasi = (e) => {
    e.preventDefault();
    if (!dp || !tenor || !gaji) {
      alert("Semua field wajib diisi!");
      return;
    }

    if (typeof onSimulasiKPR === "function") {
      onSimulasiKPR({ dp, tenor, gaji, mode: "simulasi_kpr" });
      setShowFormSimulasi(false);
    } else {
      console.warn(
        "⚠️ Fungsi onSimulasiKPR belum didefinisikan di parent component!"
      );
    }
  };

  // ======== Format Rupiah ========
  const formatRupiah = (value) => {
    if (!value) return "";
    const numberString = value.toString().replace(/\D/g, "");
    const number = parseInt(numberString, 10);
    if (isNaN(number)) return "";
    return new Intl.NumberFormat("id-ID").format(number);
  };

  const unformatRupiah = (value) => value.replace(/\D/g, "");

  return (
    <>
      {/* // Sidebar Desktop // */}
      <aside className="hidden md:flex flex-col sticky top-0 w-1/4 p-6 bg-amber-100 min-h-screen overflow-y-auto pb-20">
        <p className="text-xl font-bold justify-center text-justify-center">
          Tentukan solusi biaya rumah yang sesuai dengan kemampuan dan finansial
          kamu!
        </p>
        <div className="flex flex-col items-center justify-center h-full w-full gap-y-5">
          {/* /* Bagian atas (Hitung KPR) */}
          {/* <div className="flex flex-col items-center w-full">
            <button
              onClick={() => {
                setShowFormHitung(!showFormHitung);
                setShowFormSimulasi(false);
              }}
              className="w-4/5 py-6 text-xl font-semibold text-white bg-green-600 rounded-xl hover:bg-green-700"
            >
              Hitung KPR
            </button>

            {showFormHitung && (
              <div className="w-4/5 bg-gray-100 rounded-xl shadow-lg overflow-hidden mt-4">
                <div className="bg-green-200 py-3 text-center">
                  <h2 className="text-xl font-bold text-black">Hitung KPR</h2>
                </div>
                <form className="p-4 space-y-3" onSubmit={handleSubmit}>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Uang Muka (DP)
                    </label>
                    <input
                      type="text"
                      value={dp ? `Rp ${formatRupiah(dp)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setDp(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Tenor Angsuran
                    </label>
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        value={tenor}
                        onChange={(e) => {
                          setTenor(e.target.value);
                        }}
                        className="flex-1 px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <span className=" text-gray-700 text-sm">Tahun</span>
                    </div>
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Bank dan Program KPR
                    </label>
                    <input
                      type="text"
                      placeholder="Refrensi Bank BRI : 2.99%"
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                      disabled
                    />
                  </div>
                  <button
                    type="submit"
                    className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg"
                  >
                    Hitung
                  </button>
                </form>
              </div>
            )}
          </div> */}

          {/* Bagian bawah (Simulasi KPR) */}
          <div className="flex flex-col items-center w-full">
            <button
              id="btn-simulasi-kpr-desktop"
              onClick={() => {
                setShowFormSimulasi(!showFormSimulasi);
                setShowFormHitung(false);
              }}
              className="w-4/5 py-6 text-xl font-semibold text-white bg-green-600 rounded-xl hover:bg-green-700"
            >
              Simulasi KPR
            </button>

            {showFormSimulasi && (
              <div className="w-4/5 bg-gray-100 rounded-xl shadow-lg overflow-hidden mt-4">
                <div className="bg-green-200 py-3 text-center">
                  <h2 className="text-xl font-bold text-black">Simulasi KPR</h2>
                </div>
                <form
                  id="form-simulasi-kpr-desktop"
                  className="p-4 space-y-4"
                  onSubmit={handleSubmitSimulasi}
                >
                  {/* Penghasilan Bulanan */}
                  <div>
                    <label
                      htmlFor="input-penghasilan-desktop"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Penghasilan Bulanan
                    </label>
                    <p className="text-xs text-gray-500 mb-1">
                      *Masukkan total penghasilan menyeluruh
                    </p>
                    <input
                      id="input-penghasilan-desktop"
                      type="text"
                      value={gaji ? `Rp ${formatRupiah(gaji)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setGaji(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  {/* Cicilan Aktif */}
                  {/* <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Cicilan Bulanan Aktif
                    </label>
                    <p className="text-xs text-gray-500 mb-1">
                      *Masukkan cicilan yang sedang aktif (isi 0 jika tidak
                      ada).
                    </p>
                    <input
                      type="number"
                      value={tenor}
                      onChange={(e) => {
                        setTenor(e.target.value);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div> */}

                  {/* Kesanggupan Uang Muka */}
                  <div>
                    <label
                      htmlFor="input-kesanggupan-desktop"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Kesanggupan Uang Muka
                    </label>
                    <input
                      id="input-kesanggupan-desktop"
                      type="text"
                      value={dp ? `Rp ${formatRupiah(dp)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setDp(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label
                      htmlFor="input-tenor-desktop"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Tenor Angsuran
                    </label>
                    <div className="flex items-center gap-2">
                      <input
                        id="input-tenor-desktop"
                        type="number"
                        value={tenor}
                        onChange={(e) => {
                          setTenor(e.target.value);
                        }}
                        className="flex-1 px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <span className=" text-gray-700 text-sm">Tahun</span>
                    </div>
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Bank dan Program KPR
                    </label>
                    <input
                      type="text"
                      placeholder="Refrensi Bank BRI : 2.99%"
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                      disabled
                    />
                  </div>

                  <button
                    id="btn-submit-desktop"
                    type="submit"
                    className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg"
                  >
                    Hitung
                  </button>
                </form>
              </div>
            )}
          </div>
        </div>
      </aside>

      {/* Header Sidebar (Mobile) */}
      <div className="md:hidden sticky top-0 flex flex-col items-center p-4 bg-amber-100 z-40 shadow">
        <h2 className="text-xl font-bold text-green-700">Menu</h2>
        <img
          src={MenuIcon}
          alt="menu"
          width="25"
          height="25"
          className="cursor-pointer mt-2"
          onClick={() => setOpen(true)}
        />
      </div>

      {/* Overlay hitam */}
      {open && (
        <div
          className="fixed inset-0 bg-black bg-opacity-40 z-40 md:hidden"
          onClick={() => setOpen(false)}
        />
      )}

      {/* Sidebar Mobile */}
      <div
        className={`fixed top-0 left-0 z-50 h-screen w-64 bg-amber-100 shadow-lg transform transition-transform duration-300 ease-in-out md:hidden flex flex-col items-center justify-center p-6 ${
          open ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        <div className="absolute top-4 right-4">
          <img
            src={CloseIcon}
            alt="close"
            width="30"
            height="30"
            className="cursor-pointer"
            onClick={() => setOpen(false)}
          />
        </div>

        <div className="flex flex-col items-center w-full gap-y-8 mt-12">
          <p>
            Tentukan Solusi biaya rumah yang sesuai dengan kemampuan dan
            finansial kamu!
          </p>

          {/* Tombol Hitung KPR Mobile */}
          {/* <div className="flex flex-col items-center w-full">
            <button
              onClick={() => {
                setShowFormHitung(!showFormHitung);
                setShowFormSimulasi(false);
              }}
              className="w-4/5 py-6 text-xl font-semibold text-white bg-green-600 rounded-xl hover:bg-green-700"
            >
              Hitung KPR
            </button>
            {showFormHitung && (
              <div className="w-4/5 bg-gray-100 rounded-xl shadow-lg overflow-hidden mt-4">
                <div className="bg-green-200 py-3 text-center">
                  <h2 className="text-xl font-bold text-black">Hitung KPR</h2>
                </div>
                <form className="p-4 space-y-3" onSubmit={handleSubmit}>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Uang Muka (DP)
                    </label>
                    <input
                      type="text"
                      value={dp ? `Rp ${formatRupiah(dp)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setDp(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Tenor Angsuran
                    </label>
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        value={tenor}
                        onChange={(e) => {
                          setTenor(e.target.value);
                        }}
                        className="flex-1 px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <span className="flex-shrink-0 text-gray-700 text-sm">
                        Tahun
                      </span>
                    </div>
                  </div>

                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Bank dan Program KPR
                    </label>
                    <input
                      type="text"
                      placeholder="Refrensi Bank BRI : 2.99%"
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                    />
                  </div>
                  <button
                    type="submit"
                    className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg"
                  >
                    Hitung
                  </button>
                </form>
              </div>
            )}
          </div> */}

          {/* Tombol Simulasi KPR Mobile */}
          <div className="flex flex-col items-center w-full">
            <button
              id="btn-simulasi-kpr-mobile"
              onClick={() => {
                setShowFormSimulasi(!showFormSimulasi);
                setShowFormHitung(false);
              }}
              className="w-4/5 py-6 text-xl font-semibold text-white bg-green-600 rounded-xl hover:bg-green-700"
            >
              Simulasi KPR
            </button>
            {showFormSimulasi && (
              <div className="w-4/5 bg-gray-100 rounded-xl shadow-lg overflow-hidden mt-4">
                <div className="bg-green-200 py-3 text-center">
                  <h2 className="text-xl font-bold text-black">Simulasi KPR</h2>
                </div>
                <form className="p-4 space-y-4" onSubmit={handleSubmitSimulasi}>
                  {/* Penghasilan Bulanan */}
                  <div>
                    <label
                      htmlFor="input-penghasilan-mobile"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Penghasilan Bulanan
                    </label>
                    <p className="text-xs text-gray-500 mb-1">
                      *Masukkan total penghasilan menyeluruh
                    </p>
                    <input
                      input="input-penghasilan-mobile"
                      type="text"
                      value={gaji ? `Rp ${formatRupiah(gaji)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setGaji(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  {/* Cicilan Aktif */}
                  {/* <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Cicilan Bulanan Aktif
                    </label>
                    <p className="text-xs text-gray-500 mb-1">
                      *Masukkan cicilan yang sedang aktif (isi 0 jika tidak
                      ada).
                    </p>
                    <input
                      type="number"
                      value={tenor}
                      onChange={(e) => {
                        setTenor(e.target.value);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div> */}

                  {/* Kesanggupan Uang Muka */}
                  <div>
                    <label
                      htmlFor="input-kesanggupan-mobile"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Kesanggupan Uang Muka
                    </label>
                    <input
                      id="input-kesanggupan-mobile"
                      type="text"
                      value={dp ? `Rp ${formatRupiah(dp)}` : ""}
                      onChange={(e) => {
                        const rawValue = unformatRupiah(e.target.value);
                        setDp(rawValue);
                      }}
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label
                      htmlFor="input-tenor-mobile"
                      className="block text-gray-700 text-sm font-medium mb-1"
                    >
                      Tenor Angsuran
                    </label>
                    <div className="flex items-center gap-2">
                      <input
                        id="input-tenor-mobile"
                        type="number"
                        value={tenor}
                        onChange={(e) => {
                          setTenor(e.target.value);
                        }}
                        className="flex-1 px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <span className=" text-gray-700 text-sm">Tahun</span>
                    </div>
                  </div>
                  <div>
                    <label className="block text-gray-700 text-sm font-medium mb-1">
                      Bank dan Program KPR
                    </label>
                    <input
                      type="text"
                      placeholder="Refrensi Bank BRI : 2.99%"
                      className="w-full px-3 py-2 border border-blue-400 rounded-lg focus:ring-2 focus:ring-blue-500"
                      readOnly
                      disabled
                    />
                  </div>

                  <button
                    id="btn-submit-mobile"
                    type="submit"
                    className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg"
                  >
                    Hitung
                  </button>
                </form>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
}